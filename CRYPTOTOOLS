/**------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/**------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/**---------------------------------                       GOOGLE SHEET FORMULA USERINTERFACE WITH EXPLANATION                           ---------------------- */
/**------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/**------------------------------------------------------------------------------------------------------------------------------------------------------------ */


function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('CRYPTOBALANCE')
      .addItem('Refresh Balances', 'ShowHowToRefresh')
      .addSeparator()
      .addItem('Contact Info', 'ShowContactInfo')
      .addToUi();
  ui.createMenu('CRYPTOSTAKING')
      .addItem('Parameters', 'ShowHowCRYPTOSTAKING')
      .addSeparator()
      .addItem('Example', 'CRYPTOSTAKING_EXAMPLE')
      .addSeparator()
      .addItem('Contact Info', 'ShowContactInfo')
      .addToUi();
  ui.createMenu('CRYPTOREWARDS')
      .addItem('Parameters', 'ShowHowCRYPTOREWARDS')
      .addSeparator()
      .addItem('Example', 'CRYPTOREWARDS_EXAMPLE')
      .addSeparator()
      .addItem('Contact Info', 'ShowContactInfo')
      .addToUi();
  ui.createMenu('CRYPTOLENDING')
      .addItem('Available Lending PLateforms', 'ShowAvailableExchanges')
      .addSeparator()
      .addItem('Available Token Name', 'ShowHowAvailableTokens')
      .addSeparator()
      .addItem('Lending Side', 'ShowSides')
      .addSeparator()
      .addItem('Show Example', 'ShowExample')
      .addSeparator()
      .addItem('Contact Info', 'ShowContactInfo')
      .addToUi();
}

function ShowHowToRefresh() {
  var ui = SpreadsheetApp.getUi()
  ui.alert("Refresh Balances",
           'In your CRYPTOBALANCE function, add a 3rd argument to a locked reference cell, like A1. \nFrom now on every time you change the content of the cell A1, your data will be updated.\nExample:\n=CRYPTBALANCE("BTC","35hK24tcLEWcgNA4JxpvbkNkoAcDGqQPsP",$A$1)',
            ui.ButtonSet.OK)
}
function CRYPTOSTAKING_EXAMPLE() {
  var ui = SpreadsheetApp.getUi()
  ui.alert("ShowExample",
           '=CRYPTOSTAKING("EOS","okbtothemoon")\n\ Gets the EOS staked on the sub-mentionned address',
            ui.ButtonSet.OK)
}
function ShowHowCRYPTOSTAKING() {
  var ui = SpreadsheetApp.getUi()
  ui.alert("Parameters",
           'Returns the amount STAKED on PoS cryptocurrencies.\n\@param {"CURRENCY TICKER FOR STAKING"} The cryptocurrency TICKER/SYMBOL data to fetch, for example the symbol of Bitcoin is BTC.\n\@param {"PUBLIC WALLET ADDRESS"} associated to the cryptocurrency you want the balance from. Please pay attention, DO NOT TO ENTER your private wallet address.\n\@param {"EMPTY CELL REFERENCE"} refresh_cell ONLY on 3rd argument. Reference an empty cell and change its content to force refresh the balances.\n\@return The current amount of cryptocurrency on the searched public address.',
            ui.ButtonSet.OK)
}
function ShowHowCRYPTOREWARDS() {
  var ui = SpreadsheetApp.getUi()
  ui.alert("Parameters",
           'Returns cryptocurrencies REWARDS on PoS cryptocurrencies.\n\ @param {"CURRENCY TICKER FOR REWARDS"} The cryptocurrency TICKER/SYMBOL data to fetch, for example the symbol of Bitcoin is BTC.\n\ @param {"PUBLIC WALLET ADDRESS"} associated to the cryptocurrency you want the rewards from. Please pay attention, DO NOT TO ENTER your private wallet address.\n\@param {"EMPTY CELL REFERENCE"} refresh_cell ONLY on 3rd argument. Reference an empty cell and change its content to force refresh the balances.\n\ @return The current amount of cryptocurrency on the searched public address.',
             ui.ButtonSet.OK)
}
function CRYPTOREWARDS_EXAMPLE() {
  var ui = SpreadsheetApp.getUi()
  ui.alert("Example",
           '=CRYPTOREWARDS("ATOM","cosmos1r0y7s2vrgk3nw3nkp5tyy8zxjkz7nw9vrvmxun")\n\ Gets the ATOM rewards for staking on the sub-mentionned address',
            ui.ButtonSet.OK)
}

function ShowContactInfo() {
  var ui = SpreadsheetApp.getUi()
  ui.alert("Contact Info",
            'Support email: ac@charmantadvisory.com\n\
             Telegram Chat: https://t.me/TheCryptoCurious',
            ui.ButtonSet.OK)
}
function ShowAvailableExchanges() {
  var ui = SpreadsheetApp.getUi()
  ui.alert("Lending plateforms",
            'COMPOUND\n\DXDY\n\NUO',
            ui.ButtonSet.OK)
}
function ShowHowAvailableTokens() {
  var ui = SpreadsheetApp.getUi()
  ui.alert("Available Token Name",
           'Please check the available cryptocurrencies on the lending plateform and enter their ticker. Like for Ethereum, enter ETH',
            ui.ButtonSet.OK)
}
function ShowSides() {
  var ui = SpreadsheetApp.getUi()
  ui.alert("ShowSides",
           'APR_BORROW\n\APR_LEND',
            ui.ButtonSet.OK)
}
function ShowExample() {
  var ui = SpreadsheetApp.getUi()
  ui.alert("ShowExample",
           '=CRYPTOLENDING("COMPOUND","ETH","APR_BORROW")\n\ Gets the borrowing rate on compound for Ethereum.',
            ui.ButtonSet.OK)
}


/**------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/**------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/**---------------------------------------     GOOGLE FORMULAS ->      [CRYPTOBALANCE  CRYPTOSTAKING  CRYPTOREWARDS  CRYPTOLENDING ]--------------------------- */
/**------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/**------------------------------------------------------------------------------------------------------------------------------------------------------------ */

/**CRYPTOBALANCE
 * Returns cryptocurrencies balances for the top 150 cryptocurrencies.
 *
 * @param {"CURRENCY TICKER"} The cryptocurrency TICKER/SYMBOL data to fetch, for example the symbol of Bitcoin is BTC.
 * @param {"PUBLIC WALLET ADDRESS"} associated to the cryptocurrency you want the balance from. Please pay attention, DO NOT TO ENTER your private wallet address.
 * @param {"EMPTY CELL REFERENCE"} refresh_cell ONLY on 3rd argument. Reference an empty cell and change its content to force refresh the balances.
 * @return The current amount of cryptocurrency on the searched public address.
 */

function CRYPTOBALANCE(ticker,address, refresh_cell){
  try{
    //

    ticker=ticker.toUpperCase();
    var GSUUID = encodeURIComponent(Session.getTemporaryActiveUserKey());
    

    GSUUID= GSUUID.replace(/%2f/gi, 'hello');
    url="http://api.charmantadvisory.com/BALANCE/"+ticker+"/"+address+"/"+GSUUID+"CRYPTOBALANCETEMPLATE";
    var res = UrlFetchApp.fetch(url);
    var content = res.getContentText();

    return content;
  }

  catch(err){
      return "Try to load again and/or check address";
  }

}
/**CRYPTOLENDING
 * Returns cryptocurrencies lending rates on different lending plateforms.
 *
 * @param {"EXCHANGE"} The exchange on which you want to retrieve the lending rate. data to fetch. Currently available exchanges: NUO, COMPOUND, DXDY.
 * @param {"TOKEN NAME"} associated to the cryptocurrency you want the lending from. Please pay attention on the available tickers on exchanges.
 * @param {"APR_BORROW or APR_LEND"} either APR_BORROW which corresponds to the borrowing rate or APR_LEND which corresponds to the lending rate.
 * @param {"EMPTY CELL REFERENCE"} refresh_cell ONLY on 3rd argument. Reference an empty cell and change its content to force refresh the balances.
 * @return the current lending rate in decimal form,  of cryptocurrency on the searched public address.
 */

function CRYPTOLENDING(exchange,ticker,side,refresh_cell){
  try{
    //

    ticker=ticker.toUpperCase();
    exchange=exchange.toUpperCase();
    side=side.toUpperCase();
    var GSUUID = encodeURIComponent(Session.getTemporaryActiveUserKey());
    GSUUID= GSUUID.replace(/%2f/gi, 'hello');
    url="http://api.charmantadvisory.com/LENDING/"+exchange+"/"+ticker+"/"+side+"/"+GSUUID+"CRYPTOBALANCETEMPLATE";
    var res = UrlFetchApp.fetch(url);
    var content = res.getContentText();
    if (content!='None') {
      content=parseFloat(content);
    }
    
    return content;
  }

  catch(err){
    return "Currently available exchanges: NUO, COMPOUND, DXDY. Check fo avalable coins on exchanges if you get error. Contact: https://t.me/TheCryptoCurious for further support.";
  }

}
/**CRYPTOREWARDS
 * Returns cryptocurrencies REWARDS on PoS cryptocurrencies.
 *
 * @param {"CURRENCY TICKER FOR REWARDS"} The cryptocurrency TICKER/SYMBOL data to fetch, for example the symbol of Bitcoin is BTC.
 * @param {"PUBLIC WALLET ADDRESS"} associated to the cryptocurrency you want the rewards from. Please pay attention, DO NOT TO ENTER your private wallet address.
 * @param {"EMPTY CELL REFERENCE"} refresh_cell ONLY on 3rd argument. Reference an empty cell and change its content to force refresh the balances.
 * @return The current amount of cryptocurrency on the searched public address.
 */

function CRYPTOREWARDS(ticker,address, refresh_cell){
  try{
    //

    ticker=ticker.toUpperCase();
    var GSUUID = encodeURIComponent(Session.getTemporaryActiveUserKey());
    GSUUID= GSUUID.replace(/%2f/gi, 'hello');
    url="http://api.charmantadvisory.com/REWARDS/"+ticker+"/"+address+"/"+GSUUID+"CRYPTOBALANCETEMPLATE";
    var res = UrlFetchApp.fetch(url);
    var content = res.getContentText();

    return content;
  }

  catch(err){
    return "Try to load again and/or check address";
  }

}
/**CRYPTOSTAKING
 * Returns the amount STAKED on PoS cryptocurrencies.
 *
 * @param {"CURRENCY TICKER FOR STAKING"} The cryptocurrency TICKER/SYMBOL data to fetch, for example the symbol of Bitcoin is BTC.
 * @param {"PUBLIC WALLET ADDRESS"} associated to the cryptocurrency you want the balance from. Please pay attention, DO NOT TO ENTER your private wallet address.
 * @param {"EMPTY CELL REFERENCE"} refresh_cell ONLY on 3rd argument. Reference an empty cell and change its content to force refresh the balances.
 * @return The current amount of cryptocurrency on the searched public address.
 */

function CRYPTOSTAKING(ticker,address, refresh_cell){
  try{
    //

    ticker=ticker.toUpperCase();
    var GSUUID = encodeURIComponent(Session.getTemporaryActiveUserKey());
    GSUUID= GSUUID.replace(/%2f/gi, 'hello');
    url="http://api.charmantadvisory.com/STAKING/"+ticker+"/"+address+"/"+GSUUID+"CRYPTOBALANCETEMPLATE";
    var res = UrlFetchApp.fetch(url);
    var content = res.getContentText();

    return content;
  }

  catch(err){
    return "Try to load again and/or check address";
  }

}
/**CRYPTOPRICE
 * Returns the price of cryptocurrencies.
 *
 * @param {"CURRENCY TICKER"} The cryptocurrency TICKER/SYMBOL data to fetch, for example the symbol of Bitcoin is BTC.
 * @param {"EMPTY CELL REFERENCE"} refresh_cell ONLY on 3rd argument. Reference an empty cell and change its content to force refresh the balances.
 * @return The current price of cryptocurrency, price updates on an hourly basis.
 */

function CRYPTOPRICE(ticker, refresh_cell){
  try{
    //

    ticker=ticker.toUpperCase();
    var GSUUID = encodeURIComponent(Session.getTemporaryActiveUserKey());
    GSUUID= GSUUID.replace(/%2f/gi, 'hello');
    url="http://api.charmantadvisory.com/CRYPTOPRICE/"+ticker+"/"+GSUUID+"CRYPTOBALANCETEMPLATEprice";
    var res = UrlFetchApp.fetch(url);
    var content = res.getContentText();

    return content;
  }

  catch(err){
    return "Try to load again";
  }

}
    
